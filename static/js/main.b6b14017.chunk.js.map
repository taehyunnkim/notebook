{"version":3,"sources":["components/notes/NoteCard.js","components/actions/postActions.js","components/notes/CreateNote.js","components/notes/Dashboard.js","components/notes/Note.js","App.js","serviceWorker.js","components/reducers/rootReducer.js","index.js"],"names":["connect","state","notesFromStore","notes","dispatch","deleteNote","id","type","noteList","length","map","note","className","key","to","style","textDecoration","color","title","date","marginTop","onClick","CreateNote","Math","floor","random","Number","MAX_SAFE_INTEGER","this","setState","Component","Dashboard","Note","content","exists","checkNote","i","props","handleChange","e","target","value","handleCreate","history","push","updateNote","addNote","match","params","note_id","correctNote","find","document","getElementById","onChange","rows","margin","newNote","updatedNote","App","exact","path","component","Boolean","window","location","hostname","initState","rootReducer","action","editedCopy","filter","excludedCopy","store","createStore","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6b14017.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { deleteNote } from '../actions/postActions';\n\nconst NoteCard = ({ notesFromStore, deleteNote }) => {\n    const noteList = notesFromStore.length ? (\n        notesFromStore.map((note) => {\n            return (\n                <div className='col-4' key={note.id}>\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <Link to={'/notebook/' + note.id} style={{ textDecoration: 'none', color: 'black' }}>\n                                <h5 className=\"card-title\">{note.title}</h5>\n                            </Link>\n                            <p className=\"card-subtitle\"> {note.date} </p>\n                            <div className=\"text-right\">\n                                <button className=\"btn btn-outline-danger\" style={{ marginTop: '20px' }} onClick={() => { deleteNote(note.id) }}>Delete</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n        )) : (<div></div>);\n\n    return (\n        <div className=\"row\"> {noteList} </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        notesFromStore: state.notes\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        deleteNote: (id) => { dispatch(deleteNote(id)) }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteCard);","export const deleteNote = (id) => {\n    return {\n        type: 'DELETE_NOTE',\n        id: id\n    }\n}\n\nexport const addNote = (note) => {\n    return {\n        type: 'ADD_NOTE',\n        newNote: note\n    }\n}\n\nexport const updateNote = (note) => {\n    return {\n        type: \"UPDATE_NOTE\",\n        newNote: note\n    }\n\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class CreateNote extends Component {\n    state = {\n        id: null\n    }\n\n    componentDidMount() {\n        let id = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n        this.setState({\n            id: id\n        });\n    }\n\n    render() {\n        return (\n            <div className = \"text-center\">\n                <Link to={'/notebook/' + this.state.id}>\n                    <button className = \"btn btn-primary create\"> NEW NOTE </button>\n                </Link>\n            </div>\n        )\n    }\n}\n\n\nexport default CreateNote;\n","import React, { Component } from 'react'\nimport NoteCard from \"./NoteCard\";\nimport CreateNote from \"./CreateNote\";\n\nexport default class Dashboard extends Component {\n    render() {\n        return (\n            <div className = \"dashboard\">\n                <NoteCard />\n                <CreateNote />\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { addNote, updateNote } from '../actions/postActions';\n\nclass Note extends Component {\n    state = {\n        title: '',\n        content: '',\n        id: null, \n        exists: false\n    }\n\n    componentDidMount() {\n        const id = this.props.match.params.note_id;\n        const exists = this.checkNote(id);\n\n        if (exists) {\n            const correctNote = this.props.notes.find((note) => {\n                return note.id === id;\n            });\n\n            this.setState({\n                title: correctNote.title,\n                content: correctNote.content,\n                id: id,\n                exists: true\n            }, () => {\n                document.getElementById(\"title\").value = this.state.title;\n                document.getElementById(\"content\").value = this.state.content;\n            });\n        } else {\n            // Creating a new note\n            this.setState({\n                id: id\n            });\n        }\n    }\n\n    checkNote = (id) => {\n        for (let i = 0; i < this.props.notes.length; i++) {\n            if (this.props.notes[i].id === id) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        });\n    }\n\n    handleCreate = () => {\n        this.props.history.push('/notebook');\n        if(this.state.exists) {\n            this.props.updateNote(this.state);\n        } else {\n            this.props.addNote(this.state);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"form-group\">\n                    <label> Title </label>\n                    <input type=\"text\" id=\"title\" className=\"form-control\" onChange={this.handleChange}></input>\n                </div>\n                <div className=\"form-group\" >\n                    <textarea className=\"form-control\" id=\"content\" rows=\"25\" onChange={this.handleChange} />\n                </div>\n                <div className=\"text-center\">\n                    <button className=\"btn btn-outline-primary\" onClick={this.handleCreate} style={{ margin: '20px' }}>Save</button>\n                    <button className=\"btn btn-outline-danger\" onClick={() => { this.props.history.push('/notebook') }} style={{ margin: '20px' }}>Cancel</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        notes: state.notes\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addNote: (newNote) => { dispatch(addNote(newNote)) },\n        updateNote: (updatedNote) => { dispatch(updateNote(updatedNote)) }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Note);","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/notes/Dashboard';\nimport { BrowserRouter, Route, Switch, Redirect} from 'react-router-dom'\nimport Note from './components/notes/Note'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App container\">\n        <h1 className=\"text-center\">Eric's Notebook</h1>\n        <Switch>\n          <Route exact path=\"/notebook\" component={Dashboard} />\n          <Route path=\"/notebook/:note_id\" component={Note} />\n          <Redirect to='/notebook'/>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n    notes: []\n}\n\nconst rootReducer = (state = initState, action) => {\n    if(action.type === 'DELETE_NOTE') {\n        let editedCopy = state.notes.filter(note => {\n            return note.id !== action.id;\n        })\n\n        return {\n            ...state,\n            notes: editedCopy\n        }\n    } else if (action.type === 'ADD_NOTE') {\n        let editedCopy = [...state.notes, action.newNote];\n\n        return {\n            ...state,\n            notes: editedCopy\n        }\n    } else if (action.type === 'UPDATE_NOTE') {\n        let excludedCopy = state.notes.filter((note) => {\n            return note.id !== action.newNote.id;\n        });\n\n        return {\n            ...state,\n            notes: [...excludedCopy, action.newNote]\n        }\n    }\n\n    return state;\n}\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './components/reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}