{"version":3,"sources":["components/notes/Note.js","components/notes/CreateNote.js","components/notes/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Note","noteList","deleteNote","notes","length","map","note","className","key","id","title","date","content","onClick","CreateNote","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","newId","Math","random","props","addNote","type","onChange","this","Component","Dashboard","newNote","newList","ID","filter","existingNote","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAyBeA,EAvBF,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WAChBC,EAAQF,EAASG,OACnBH,EAASI,KAAI,SAACC,GACd,OACI,yBAAKC,UAAY,WAAWC,IAAKF,EAAKG,IAClC,yBAAKF,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAcD,EAAKI,OACjC,uBAAGH,UAAU,iBAAb,IAA+BD,EAAKK,KAApC,KACA,uBAAGJ,UAAU,aAAb,IAA2BD,EAAKM,QAAhC,KACA,4BAAQL,UAAU,oBAAoBM,QAAS,WAAOX,EAAWI,EAAKG,MAAtE,gBAMd,6BAAK,mDAEX,OACI,yBAAKF,UAAY,OAAjB,IAAyBJ,EAAzB,M,OCnBaW,E,2MACjBC,MAAQ,CACJL,MAAO,GACPC,KAAM,QACNC,QAAS,GACTH,GAAI,M,EAGRO,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOV,GAAKQ,EAAEE,OAAOC,S,EAIhCC,aAAe,SAACJ,GAEZ,GADAA,EAAEK,iBACsB,KAArB,EAAKP,MAAML,MAAc,CACxB,IAAMa,EAAQC,KAAKC,SACnB,EAAKP,SAAS,CACVT,GAAIc,IAER,EAAKG,MAAMC,QAAQ,EAAKZ,OACxB,EAAKG,SAAS,CACVR,MAAO,GACPE,QAAS,O,wEAMjB,OACI,yBAAKL,UAAY,UACb,yBAAKA,UAAU,cACX,wCACA,2BAAOqB,KAAK,OAAOrB,UAAU,eAAeE,GAAG,QAAQoB,SAAUC,KAAKd,aAAcI,MAASU,KAAKf,MAAML,SAE5G,yBAAKH,UAAU,cACX,0CACA,2BAAOqB,KAAK,OAAOrB,UAAU,eAAeE,GAAG,UAAUoB,SAAUC,KAAKd,aAAcI,MAASU,KAAKf,MAAMH,WAE9G,4BAAQgB,KAAK,SAASrB,UAAU,kBAAkBM,QAASiB,KAAKT,cAAhE,e,GAxCwBU,aCEnBC,E,2MACjBjB,MAAQ,CAACZ,MAAO,CACZ,CAACO,MAAO,SAAUC,KAAM,SAAUC,QAAS,YAAaH,GAAI,GAC5D,CAACC,MAAO,SAAUC,KAAM,SAAUC,QAAS,YAAaH,GAAI,GAC5D,CAACC,MAAO,SAAUC,KAAM,SAAUC,QAAS,YAAaH,GAAI,GAC5D,CAACC,MAAO,SAAUC,KAAM,SAAUC,QAAS,YAAaH,GAAI,GAC5D,CAACC,MAAO,SAAUC,KAAM,SAAUC,QAAS,YAAaH,GAAI,K,EAGhEkB,QAAU,SAACM,GACP,IAAMC,EAAO,sBAAO,EAAKnB,MAAMZ,OAAlB,CAAwB8B,IACrC,EAAKf,SAAS,CACVf,MAAO+B,K,EAIfhC,WAAa,SAACiC,GACV,IAAMD,EAAU,EAAKnB,MAAMZ,MAAMiC,QAAO,SAAAC,GACpC,OAAOA,EAAa5B,KAAO0B,KAG/B,EAAKjB,SAAS,CACVf,MAAO+B,K,wEAMX,OADAI,QAAQC,IAAIT,KAAKf,MAAMZ,MAAMC,QAEzB,yBAAKG,UAAY,aACb,kBAAC,EAAD,CAAMN,SAAY6B,KAAKf,MAAMZ,MAAOD,WAAc4B,KAAK5B,aACvD,kBAAC,EAAD,CAAYyB,QAAWG,KAAKH,e,GA/BLI,aCSxBS,MATf,WACE,OACE,yBAAKjC,UAAU,iBACb,wBAAIA,UAAU,eAAd,YACA,kBAAC,EAAD,QCIckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bdf8f8cd.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ noteList, deleteNote}) => {\n    const notes = noteList.length ? (\n        noteList.map((note) => {\n        return (\n            <div className = 'col-sm-4' key={note.id}>\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{note.title}</h5>\n                        <p className=\"card-subtitle\"> {note.date} </p>\n                        <p className=\"card-body\"> {note.content} </p>\n                        <button className=\"btn btn-secondary\" onClick={() => {deleteNote(note.id)}}>Delete</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    )) : (<div><h1>There are no notes</h1></div>);\n\n    return (\n        <div className = \"row\"> {notes} </div>\n    );\n}\n\nexport default Note;","import React, { Component } from 'react'\n\nexport default class CreateNote extends Component {\n    state = {\n        title: '',\n        date: \"today\",\n        content: '',\n        id: null\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if(this.state.title !== '') {\n            const newId = Math.random();\n            this.setState({\n                id: newId\n            });\n            this.props.addNote(this.state);\n            this.setState({\n                title: '',\n                content: ''\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className = \"create\">\n                <div className=\"form-group\">\n                    <label>Title</label>\n                    <input type=\"text\" className=\"form-control\" id=\"title\" onChange={this.handleChange} value = {this.state.title}></input>\n                </div>\n                <div className=\"form-group\">\n                    <label>Content</label>\n                    <input type=\"text\" className=\"form-control\" id=\"content\" onChange={this.handleChange} value = {this.state.content}></input>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\" onClick={this.handleSubmit}>Create</button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Note from \"./Note\";\nimport CreateNote from \"./CreateNote\";\n\nexport default class Dashboard extends Component {\n    state = {notes: [\n        {title: \"Note 1\", date: 'date 1', content: 'content 1', id: 1}, \n        {title: \"Note 2\", date: 'date 2', content: 'content 2', id: 2},\n        {title: \"Note 3\", date: 'date 3', content: 'content 3', id: 3},\n        {title: \"Note 4\", date: 'date 4', content: 'content 4', id: 4},\n        {title: \"Note 5\", date: 'date 5', content: 'content 5', id: 5}\n    ]}\n\n    addNote = (newNote) => {\n        const newList = [...this.state.notes,newNote];\n        this.setState({\n            notes: newList\n        });\n    }\n\n    deleteNote = (ID) => {\n        const newList = this.state.notes.filter(existingNote => {\n            return existingNote.id !== ID;\n        });\n\n        this.setState({\n            notes: newList\n        });\n    }\n\n    render() {\n        console.log(this.state.notes.length);\n        return (\n            <div className = \"dashboard\">\n                <Note noteList = {this.state.notes} deleteNote = {this.deleteNote}/>\n                <CreateNote addNote = {this.addNote}/>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/notes/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <h1 className=\"text-center\">Notebook</h1>\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}